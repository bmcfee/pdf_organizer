#!/usr/bin/env python
# CREATED:2014-10-02 16:12:29 by Brian McFee <brian.mcfee@nyu.edu>
'''Organize your pdfs on disk by file'''

import argparse
import PyPDF2
import os
import glob
import sys
import time
import datetime
import shutil


def get_pdf_metadata(filename):
    '''Get the metadata dict from a pdf file'''
    metadata = dict()

    with open(filename, 'rb') as stream:
        pdf = PyPDF2.PdfFileReader(stream)
        metadata.update(pdf.getDocumentInfo())

    return metadata


def parse_date(metadata):
    '''parse PDF creationdate string into a datetime object'''

    datestring = metadata['/CreationDate'][2:-7]
    timestr = time.strptime(datestring, "%Y%m%d%H%M%S")
    return datetime.datetime.fromtimestamp(time.mktime(timestr))

def full_path(path):
    '''Perform all path manipulations'''

    path = os.path.expanduser(path)
    path = os.path.expandvars(path)
    path = os.path.abspath(path)

    return path


def target(infile, outpath, fmt):
    '''Determine the target of an input file with the given 
    output path and date format string'''

    dtime = parse_date(get_pdf_metadata(infile))

    outfile = os.path.join(full_path(outpath), 
                           dtime.strftime(fmt), 
                           os.path.basename(infile))
    
    return outfile


def makedirs(filename):
    outdir = os.path.dirname(filename)
    
    if not os.path.exists(outdir):
        os.makedirs(os.path.dirname(filename))
    elif not os.path.isdir(outdir):
        raise OSError('Destination {0} is not a directory'.format(outdir))
    


def sort_file(infile, outpath, no_action=False, verbose=False, fmt='%Y'):
    
    try:
        outfile = target(infile, outpath, fmt)
    except KeyError:
        if verbose:
            print '{0} has no date string, skipping.'.format(infile)
            return
    

    if verbose:
        if no_action:
            print 'would move ',
        
        print '{0} => {1}'.format(infile, outfile)
    
    if no_action:
        return
    
    makedirs(outfile)    
    shutil.move(infile, outfile)


def sort_globs(pattern, outpath, **kwargs):
    
    for infile in glob.glob(pattern):
        sort_file(infile, outpath, **kwargs)

def get_params(args):

    parser = argparse.ArgumentParser(description='Organize PDF files on disk')

    parser.add_argument('outpath', action='store', 
                        help='Destination directory to store sorted files')

    parser.add_argument('-n', '--dry-run', dest='no_action', action='store_true',
                        help='do not move files')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',
                        help='verbose output')

    parser.add_argument('-f', '--fmt', default='%Y', 
                        type=str, 
                        help='Date-time format string for subdirectories')

    parser.add_argument('patterns', nargs='+', action='store', 
                        help='One or more file patterns (eg *.pdf) to process')

    return vars(parser.parse_args(args))

if __name__ == '__main__':

    params = get_params(sys.argv[1:])

    for pattern in params['patterns']:
        sort_globs(pattern, 
                   params['outpath'], 
                   verbose=params['verbose'],
                   no_action=params['no_action'],
                   fmt=params['fmt'])
